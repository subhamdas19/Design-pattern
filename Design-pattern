https://howtodoinjava.com/design-patterns/creational/builder-pattern-in-java/(builder pattern)
https://www.geeksforgeeks.org/facade-design-pattern-introduction/(facade) code
https://howtodoinjava.com/design-patterns/structural/facade-design-pattern/(theory)
https://howtodoinjava.com/design-patterns/behavioral/template-method-pattern/(template)
https://www.geeksforgeeks.org/adapter-pattern/(Adapter)
Adapter design pattern is one of the structural design pattern and its used so that two unrelated interfaces can work together. The object, that joins these unrelated interfaces, is called an Adapter.
https://howtodoinjava.com/design-patterns/behavioral/observer-design-pattern/(observer)
https://howtodoinjava.com/design-patterns/behavioral/strategy-design-pattern/

Strategy pattern enables a client code to choose from a family of related but different algorithms and gives it a simple way to choose any of the algorithm in runtime depending on the client context.
Abstract Factory provides interfaces for creating families of related or dependent objects without specifying their concrete classes.
singleton(javatpoint),synchronization(later),factory(javatpoint) and abstract factory (https://www.geeksforgeeks.org/abstract-factory-pattern/)
diffrence between abstract factory and factory pattern
1.abstract factory has one more level of abstraction on top of it.Factory method uses inheritance and subclasses decide which class to instantiate
2.abstract factory uses an object which consists of multiple factory methods whereas factory pattern uses a single object


pub sub architecture
